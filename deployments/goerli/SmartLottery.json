{
  "address": "0x363c501b3641dFB9d5b4EA4309b7b6Fa9bb16976",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subsId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallBackLimits",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmationNums",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum SmartLottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb25a8db8e4a73898b826e9217c6d544c0092e5ee608c8d9d8ff9584f38a401ba",
  "receipt": {
    "to": null,
    "from": "0xBbaa38eC83B040843BEB3FDC67Ba7Aea38C8213E",
    "contractAddress": "0x363c501b3641dFB9d5b4EA4309b7b6Fa9bb16976",
    "transactionIndex": 1,
    "gasUsed": "1374810",
    "logsBloom": "0x
    "blockHash": "0x641d8d2f7a9b07460b275ae554865c3770311f77a06f7be220984d8038ba8e8e",
    "transactionHash": "0xb25a8db8e4a73898b826e9217c6d544c0092e5ee608c8d9d8ff9584f38a401ba",
    "logs": [],
    "blockNumber": 7670880,
    "cumulativeGasUsed": "1398648",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "245",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "500000",
    "100000000000000000",
    "10"
  ],
  "numDeployments": 8,
  "solcInputHash": "eebc83c375708e9521b8ba5564ec0aa4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subsId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallBackLimits\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmationNums\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum SmartLottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"enterLottery()\":{\"details\":\"this function will let people join the lottery. payable function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartLottery.sol\":\"SmartLottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/SmartLottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n//import\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n// errors\\n\\nerror Raffle__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    uint256 raffleState\\n);\\nerror Raffle__TransferFailed();\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\n\\ncontract SmartLottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    // state variables\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    // chainlink variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionID;\\n    bytes32 private immutable i_keyHash; // gas lane value\\n    uint16 private immutable REQUEST_CONFIRMATION = 3;\\n    uint32 private constant NUM_WORDS = 2;\\n    uint32 private immutable i_callbackGasLimit;\\n\\n    // local variables\\n\\n    uint private immutable i_interval;\\n    uint private immutable i_entranceFee;\\n    uint private lastTimeStamp;\\n    address private recentWinner;\\n    address payable[] private players;\\n    LotteryState private state;\\n\\n    // events\\n\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event RaffleEnter(address indexed player);\\n    event WinnerPicked(address indexed player);\\n\\n    constructor(\\n        address vrfCoordinator,\\n        uint64 subsId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit,\\n        uint256 entranceFee,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinator) {\\n        i_subscriptionID = subsId;\\n        i_keyHash = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator);\\n        lastTimeStamp = block.timestamp;\\n        i_entranceFee = entranceFee;\\n        state = LotteryState.OPEN;\\n        i_interval = interval;\\n    }\\n\\n    // pure view functions - to get state variables values;\\n\\n    function getState() public view returns (LotteryState) {\\n        return state;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getRequestConfirmationNums() public pure returns (uint16) {\\n        return REQUEST_CONFIRMATION;\\n    }\\n\\n    function getContractBalance() public view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function getNumWords() public pure returns (uint32) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getCallBackLimits() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return lastTimeStamp;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return recentWinner;\\n    }\\n\\n    function getPlayer(uint index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function numPlayers() public view returns (uint) {\\n        return players.length;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint) {\\n        return i_subscriptionID;\\n    }\\n\\n    // Main functions (methods)\\n\\n    /**\\n     * @dev\\n     * this function will let people join the lottery.\\n     * payable function\\n     */\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__SendMoreToEnterRaffle();\\n        }\\n\\n        if (state != LotteryState.OPEN) {\\n            revert(\\\"Raffle not open\\\");\\n        }\\n\\n        players.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % players.length;\\n        address payable winner = players[indexOfWinner];\\n        recentWinner = winner;\\n\\n        // re initializing the contract for the next round;\\n\\n        players = new address payable[](0);\\n        state = LotteryState.OPEN;\\n        lastTimeStamp = block.timestamp;\\n\\n        // sending money to the winner\\n\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(winner);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /*checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = LotteryState.OPEN == state;\\n        bool timePassed = ((block.timestamp - lastTimeStamp) > i_interval);\\n        bool hasBalance = address(this).balance > 0;\\n        bool hasPlayers = players.length > 0;\\n        upkeepNeeded = isOpen && timePassed && hasBalance && hasPlayers;\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n\\n        bool isOpen = LotteryState.OPEN == state;\\n        bool timePassed = ((block.timestamp - lastTimeStamp) > i_interval);\\n        bool hasBalance = address(this).balance > 0;\\n        bool hasPlayers = players.length > 0;\\n\\n        upkeepNeeded = isOpen && timePassed && hasBalance && hasPlayers;\\n\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                players.length,\\n                uint256(state)\\n            );\\n        }\\n\\n        state = LotteryState.CALCULATING;\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_keyHash,\\n            i_subscriptionID,\\n            REQUEST_CONFIRMATION,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n}\\n\",\"keccak256\":\"0xfd0bfc825da403954607979415b07c528d6842c84cd0bba2278c6cf97bc8c2a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610180604052600361ffff166101009061ffff168152503480156200002357600080fd5b5060405162001b5b38038062001b5b8339818101604052810190620000499190620002a5565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508467ffffffffffffffff1660c08167ffffffffffffffff16815250508360e081815250508263ffffffff166101208163ffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050426000819055508161016081815250506000600360006101000a81548160ff0219169083600181111562000125576200012462000341565b5b021790555080610140818152505050505050505062000370565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001718262000144565b9050919050565b620001838162000164565b81146200018f57600080fd5b50565b600081519050620001a38162000178565b92915050565b600067ffffffffffffffff82169050919050565b620001c881620001a9565b8114620001d457600080fd5b50565b600081519050620001e881620001bd565b92915050565b6000819050919050565b6200020381620001ee565b81146200020f57600080fd5b50565b6000815190506200022381620001f8565b92915050565b600063ffffffff82169050919050565b620002448162000229565b81146200025057600080fd5b50565b600081519050620002648162000239565b92915050565b6000819050919050565b6200027f816200026a565b81146200028b57600080fd5b50565b6000815190506200029f8162000274565b92915050565b60008060008060008060c08789031215620002c557620002c46200013f565b5b6000620002d589828a0162000192565b9650506020620002e889828a01620001d7565b9550506040620002fb89828a0162000212565b94505060606200030e89828a0162000253565b93505060806200032189828a016200028e565b92505060a06200033489828a016200028e565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516101605161175462000407600039600081816103ac01526108ec015260008181610503015281816107e0015261089101526000818161069e01526108c601526000818161067d0152610aa10152600061063b01526000818161065c0152610a6f015260006105ff0152600081816103e9015261043d01526117546000f3fe6080604052600436106100f35760003560e01c806391ad27b41161008a578063c1c244e811610059578063c1c244e8146102ea578063de3d9fb714610315578063e2f4d63814610340578063e55ae4e81461036b576100f3565b806391ad27b41461025f57806397b2f5561461028a578063b57af9d3146102b5578063c1af5785146102e0576100f3565b8063473f1ddc116100c6578063473f1ddc146101a057806353a2c19a146101cb5780636e04ff0d146101f65780636f9fb98a14610234576100f3565b806309bc33a7146100f85780631865c57d146101235780631fe543e31461014e5780634585e33b14610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610e22565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610eb4565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190611068565b6103e7565b005b34801561018357600080fd5b5061019e6004803603810190610199919061111f565b6104a7565b005b3480156101ac57600080fd5b506101b561076a565b6040516101c291906111ad565b60405180910390f35b3480156101d757600080fd5b506101e0610794565b6040516101ed91906111e7565b60405180910390f35b34801561020257600080fd5b5061021d600480360381019061021891906112b7565b61079d565b60405161022b9291906113a3565b60405180910390f35b34801561024057600080fd5b50610249610885565b6040516102569190610e22565b60405180910390f35b34801561026b57600080fd5b5061027461088d565b6040516102819190610e22565b60405180910390f35b34801561029657600080fd5b5061029f6108b5565b6040516102ac9190610e22565b60405180910390f35b3480156102c157600080fd5b506102ca6108c2565b6040516102d791906111e7565b60405180910390f35b6102e86108ea565b005b3480156102f657600080fd5b506102ff610a62565b60405161030c9190610e22565b60405180910390f35b34801561032157600080fd5b5061032a610a6b565b6040516103379190610e22565b60405180910390f35b34801561034c57600080fd5b50610355610a9d565b60405161036291906113f0565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d919061140b565b610ac5565b60405161039f91906111ad565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610490929190611438565b60405180910390fd5b6104a38282610b0d565b5050565b60006104c16040518060200160405280600081525061079d565b5090506000600360009054906101000a900460ff1660018111156104e8576104e7610e3d565b5b600060018111156104fc576104fb610e3d565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426105309190611490565b119050600080471190506000806002805490501190508380156105505750825b80156105595750815b80156105625750805b9450846105d05747600280549050600360009054906101000a900460ff16600181111561059257610591610e3d565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105c7939291906114c4565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156105f6576105f5610e3d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b81526004016106df959493929190611537565b602060405180830381600087803b1580156106f957600080fd5b505af115801561070d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610731919061159f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a25050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002905090565b600060606000600360009054906101000a900460ff1660018111156107c5576107c4610e3d565b5b600060018111156107d9576107d8610e3d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006000544261080d9190611490565b1190506000804711905060008060028054905011905083801561082d5750825b80156108365750815b801561083f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600280549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610944576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561095857610957610e3d565b5b600360009054906101000a900460ff16600181111561097a57610979610e3d565b5b146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190611629565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60008054905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060028281548110610adb57610ada611649565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060028054905082600081518110610b2957610b28611649565b5b6020026020010151610b3b91906116a7565b9050600060028281548110610b5357610b52611649565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610bdc57610bdb610f25565b5b604051908082528060200260200182016040528015610c0a5781602001602082028036833780820191505090505b5060029080519060200190610c20929190610d62565b506000600360006101000a81548160ff02191690836001811115610c4757610c46610e3d565b5b0217905550426000819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610c9b90611709565b60006040518083038185875af1925050503d8060008114610cd8576040519150601f19603f3d011682016040523d82523d6000602084013e610cdd565b606091505b5050905080610d18576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ddb579160200282015b82811115610dda5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d82565b5b509050610de89190610dec565b5090565b5b80821115610e05576000816000905550600101610ded565b5090565b6000819050919050565b610e1c81610e09565b82525050565b6000602082019050610e376000830184610e13565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e7d57610e7c610e3d565b5b50565b6000819050610e8e82610e6c565b919050565b6000610e9e82610e80565b9050919050565b610eae81610e93565b82525050565b6000602082019050610ec96000830184610ea5565b92915050565b6000604051905090565b600080fd5b600080fd5b610eec81610e09565b8114610ef757600080fd5b50565b600081359050610f0981610ee3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f5d82610f14565b810181811067ffffffffffffffff82111715610f7c57610f7b610f25565b5b80604052505050565b6000610f8f610ecf565b9050610f9b8282610f54565b919050565b600067ffffffffffffffff821115610fbb57610fba610f25565b5b602082029050602081019050919050565b600080fd5b6000610fe4610fdf84610fa0565b610f85565b9050808382526020820190506020840283018581111561100757611006610fcc565b5b835b81811015611030578061101c8882610efa565b845260208401935050602081019050611009565b5050509392505050565b600082601f83011261104f5761104e610f0f565b5b813561105f848260208601610fd1565b91505092915050565b6000806040838503121561107f5761107e610ed9565b5b600061108d85828601610efa565b925050602083013567ffffffffffffffff8111156110ae576110ad610ede565b5b6110ba8582860161103a565b9150509250929050565b600080fd5b60008083601f8401126110df576110de610f0f565b5b8235905067ffffffffffffffff8111156110fc576110fb6110c4565b5b60208301915083600182028301111561111857611117610fcc565b5b9250929050565b6000806020838503121561113657611135610ed9565b5b600083013567ffffffffffffffff81111561115457611153610ede565b5b611160858286016110c9565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111978261116c565b9050919050565b6111a78161118c565b82525050565b60006020820190506111c2600083018461119e565b92915050565b600063ffffffff82169050919050565b6111e1816111c8565b82525050565b60006020820190506111fc60008301846111d8565b92915050565b600080fd5b600067ffffffffffffffff82111561122257611221610f25565b5b61122b82610f14565b9050602081019050919050565b82818337600083830152505050565b600061125a61125584611207565b610f85565b90508281526020810184848401111561127657611275611202565b5b611281848285611238565b509392505050565b600082601f83011261129e5761129d610f0f565b5b81356112ae848260208601611247565b91505092915050565b6000602082840312156112cd576112cc610ed9565b5b600082013567ffffffffffffffff8111156112eb576112ea610ede565b5b6112f784828501611289565b91505092915050565b60008115159050919050565b61131581611300565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561135557808201518184015260208101905061133a565b83811115611364576000848401525b50505050565b60006113758261131b565b61137f8185611326565b935061138f818560208601611337565b61139881610f14565b840191505092915050565b60006040820190506113b8600083018561130c565b81810360208301526113ca818461136a565b90509392505050565b600061ffff82169050919050565b6113ea816113d3565b82525050565b600060208201905061140560008301846113e1565b92915050565b60006020828403121561142157611420610ed9565b5b600061142f84828501610efa565b91505092915050565b600060408201905061144d600083018561119e565b61145a602083018461119e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149b82610e09565b91506114a683610e09565b9250828210156114b9576114b8611461565b5b828203905092915050565b60006060820190506114d96000830186610e13565b6114e66020830185610e13565b6114f36040830184610e13565b949350505050565b6000819050919050565b61150e816114fb565b82525050565b600067ffffffffffffffff82169050919050565b61153181611514565b82525050565b600060a08201905061154c6000830188611505565b6115596020830187611528565b61156660408301866113e1565b61157360608301856111d8565b61158060808301846111d8565b9695505050505050565b60008151905061159981610ee3565b92915050565b6000602082840312156115b5576115b4610ed9565b5b60006115c38482850161158a565b91505092915050565b600082825260208201905092915050565b7f526166666c65206e6f74206f70656e0000000000000000000000000000000000600082015250565b6000611613600f836115cc565b915061161e826115dd565b602082019050919050565b6000602082019050818103600083015261164281611606565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116b282610e09565b91506116bd83610e09565b9250826116cd576116cc611678565b5b828206905092915050565b600081905092915050565b50565b60006116f36000836116d8565b91506116fe826116e3565b600082019050919050565b6000611714826116e6565b915081905091905056fea2646970667358221220686fcc74f8eefcdeb8f55978c78a904910592a82011230aa652e7380df70d32164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806391ad27b41161008a578063c1c244e811610059578063c1c244e8146102ea578063de3d9fb714610315578063e2f4d63814610340578063e55ae4e81461036b576100f3565b806391ad27b41461025f57806397b2f5561461028a578063b57af9d3146102b5578063c1af5785146102e0576100f3565b8063473f1ddc116100c6578063473f1ddc146101a057806353a2c19a146101cb5780636e04ff0d146101f65780636f9fb98a14610234576100f3565b806309bc33a7146100f85780631865c57d146101235780631fe543e31461014e5780634585e33b14610177575b600080fd5b34801561010457600080fd5b5061010d6103a8565b60405161011a9190610e22565b60405180910390f35b34801561012f57600080fd5b506101386103d0565b6040516101459190610eb4565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190611068565b6103e7565b005b34801561018357600080fd5b5061019e6004803603810190610199919061111f565b6104a7565b005b3480156101ac57600080fd5b506101b561076a565b6040516101c291906111ad565b60405180910390f35b3480156101d757600080fd5b506101e0610794565b6040516101ed91906111e7565b60405180910390f35b34801561020257600080fd5b5061021d600480360381019061021891906112b7565b61079d565b60405161022b9291906113a3565b60405180910390f35b34801561024057600080fd5b50610249610885565b6040516102569190610e22565b60405180910390f35b34801561026b57600080fd5b5061027461088d565b6040516102819190610e22565b60405180910390f35b34801561029657600080fd5b5061029f6108b5565b6040516102ac9190610e22565b60405180910390f35b3480156102c157600080fd5b506102ca6108c2565b6040516102d791906111e7565b60405180910390f35b6102e86108ea565b005b3480156102f657600080fd5b506102ff610a62565b60405161030c9190610e22565b60405180910390f35b34801561032157600080fd5b5061032a610a6b565b6040516103379190610e22565b60405180910390f35b34801561034c57600080fd5b50610355610a9d565b60405161036291906113f0565b60405180910390f35b34801561037757600080fd5b50610392600480360381019061038d919061140b565b610ac5565b60405161039f91906111ad565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610490929190611438565b60405180910390fd5b6104a38282610b0d565b5050565b60006104c16040518060200160405280600081525061079d565b5090506000600360009054906101000a900460ff1660018111156104e8576104e7610e3d565b5b600060018111156104fc576104fb610e3d565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426105309190611490565b119050600080471190506000806002805490501190508380156105505750825b80156105595750815b80156105625750805b9450846105d05747600280549050600360009054906101000a900460ff16600181111561059257610591610e3d565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105c7939291906114c4565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156105f6576105f5610e3d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b81526004016106df959493929190611537565b602060405180830381600087803b1580156106f957600080fd5b505af115801561070d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610731919061159f565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a25050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002905090565b600060606000600360009054906101000a900460ff1660018111156107c5576107c4610e3d565b5b600060018111156107d9576107d8610e3d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006000544261080d9190611490565b1190506000804711905060008060028054905011905083801561082d5750825b80156108365750815b801561083f5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600280549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610944576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561095857610957610e3d565b5b600360009054906101000a900460ff16600181111561097a57610979610e3d565b5b146109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b190611629565b60405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60008054905090565b60007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600060028281548110610adb57610ada611649565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600060028054905082600081518110610b2957610b28611649565b5b6020026020010151610b3b91906116a7565b9050600060028281548110610b5357610b52611649565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610bdc57610bdb610f25565b5b604051908082528060200260200182016040528015610c0a5781602001602082028036833780820191505090505b5060029080519060200190610c20929190610d62565b506000600360006101000a81548160ff02191690836001811115610c4757610c46610e3d565b5b0217905550426000819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610c9b90611709565b60006040518083038185875af1925050503d8060008114610cd8576040519150601f19603f3d011682016040523d82523d6000602084013e610cdd565b606091505b5050905080610d18576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610ddb579160200282015b82811115610dda5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d82565b5b509050610de89190610dec565b5090565b5b80821115610e05576000816000905550600101610ded565b5090565b6000819050919050565b610e1c81610e09565b82525050565b6000602082019050610e376000830184610e13565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e7d57610e7c610e3d565b5b50565b6000819050610e8e82610e6c565b919050565b6000610e9e82610e80565b9050919050565b610eae81610e93565b82525050565b6000602082019050610ec96000830184610ea5565b92915050565b6000604051905090565b600080fd5b600080fd5b610eec81610e09565b8114610ef757600080fd5b50565b600081359050610f0981610ee3565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f5d82610f14565b810181811067ffffffffffffffff82111715610f7c57610f7b610f25565b5b80604052505050565b6000610f8f610ecf565b9050610f9b8282610f54565b919050565b600067ffffffffffffffff821115610fbb57610fba610f25565b5b602082029050602081019050919050565b600080fd5b6000610fe4610fdf84610fa0565b610f85565b9050808382526020820190506020840283018581111561100757611006610fcc565b5b835b81811015611030578061101c8882610efa565b845260208401935050602081019050611009565b5050509392505050565b600082601f83011261104f5761104e610f0f565b5b813561105f848260208601610fd1565b91505092915050565b6000806040838503121561107f5761107e610ed9565b5b600061108d85828601610efa565b925050602083013567ffffffffffffffff8111156110ae576110ad610ede565b5b6110ba8582860161103a565b9150509250929050565b600080fd5b60008083601f8401126110df576110de610f0f565b5b8235905067ffffffffffffffff8111156110fc576110fb6110c4565b5b60208301915083600182028301111561111857611117610fcc565b5b9250929050565b6000806020838503121561113657611135610ed9565b5b600083013567ffffffffffffffff81111561115457611153610ede565b5b611160858286016110c9565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111978261116c565b9050919050565b6111a78161118c565b82525050565b60006020820190506111c2600083018461119e565b92915050565b600063ffffffff82169050919050565b6111e1816111c8565b82525050565b60006020820190506111fc60008301846111d8565b92915050565b600080fd5b600067ffffffffffffffff82111561122257611221610f25565b5b61122b82610f14565b9050602081019050919050565b82818337600083830152505050565b600061125a61125584611207565b610f85565b90508281526020810184848401111561127657611275611202565b5b611281848285611238565b509392505050565b600082601f83011261129e5761129d610f0f565b5b81356112ae848260208601611247565b91505092915050565b6000602082840312156112cd576112cc610ed9565b5b600082013567ffffffffffffffff8111156112eb576112ea610ede565b5b6112f784828501611289565b91505092915050565b60008115159050919050565b61131581611300565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561135557808201518184015260208101905061133a565b83811115611364576000848401525b50505050565b60006113758261131b565b61137f8185611326565b935061138f818560208601611337565b61139881610f14565b840191505092915050565b60006040820190506113b8600083018561130c565b81810360208301526113ca818461136a565b90509392505050565b600061ffff82169050919050565b6113ea816113d3565b82525050565b600060208201905061140560008301846113e1565b92915050565b60006020828403121561142157611420610ed9565b5b600061142f84828501610efa565b91505092915050565b600060408201905061144d600083018561119e565b61145a602083018461119e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149b82610e09565b91506114a683610e09565b9250828210156114b9576114b8611461565b5b828203905092915050565b60006060820190506114d96000830186610e13565b6114e66020830185610e13565b6114f36040830184610e13565b949350505050565b6000819050919050565b61150e816114fb565b82525050565b600067ffffffffffffffff82169050919050565b61153181611514565b82525050565b600060a08201905061154c6000830188611505565b6115596020830187611528565b61156660408301866113e1565b61157360608301856111d8565b61158060808301846111d8565b9695505050505050565b60008151905061159981610ee3565b92915050565b6000602082840312156115b5576115b4610ed9565b5b60006115c38482850161158a565b91505092915050565b600082825260208201905092915050565b7f526166666c65206e6f74206f70656e0000000000000000000000000000000000600082015250565b6000611613600f836115cc565b915061161e826115dd565b602082019050919050565b6000602082019050818103600083015261164281611606565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006116b282610e09565b91506116bd83610e09565b9250826116cd576116cc611678565b5b828206905092915050565b600081905092915050565b50565b60006116f36000836116d8565b91506116fe826116e3565b600082019050919050565b6000611714826116e6565b915081905091905056fea2646970667358221220686fcc74f8eefcdeb8f55978c78a904910592a82011230aa652e7380df70d32164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "enterLottery()": {
        "details": "this function will let people join the lottery. payable function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 258,
        "contract": "contracts/SmartLottery.sol:SmartLottery",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 260,
        "contract": "contracts/SmartLottery.sol:SmartLottery",
        "label": "recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 263,
        "contract": "contracts/SmartLottery.sol:SmartLottery",
        "label": "players",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 266,
        "contract": "contracts/SmartLottery.sol:SmartLottery",
        "label": "state",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LotteryState)237"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)237": {
        "encoding": "inplace",
        "label": "enum SmartLottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}